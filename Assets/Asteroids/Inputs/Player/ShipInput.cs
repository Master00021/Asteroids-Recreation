//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Asteroids/Inputs/Player/ShipInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ShipInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ShipInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShipInput"",
    ""maps"": [
        {
            ""name"": ""StartGame"",
            ""id"": ""04f589d0-9ecb-4599-9866-72412b1983f7"",
            ""actions"": [
                {
                    ""name"": ""PressToStart"",
                    ""type"": ""Button"",
                    ""id"": ""5b696c5a-e73b-4c7f-a21e-ae1ae4e17843"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1398cd94-7b68-486e-922f-933853ba695d"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressToStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AsteroidShip"",
            ""id"": ""07425396-4d9d-4da7-a9b2-0b725e2502f8"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""8f662243-818a-47fc-8e26-8bd75762045c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""b2bbbafa-2ce4-467f-8d1d-6893d390fbea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""0c86237f-0bc6-401c-bb9b-016c2b6ab1fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""328118e2-1102-4d37-a638-4a69c87107e1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5f379e7f-7c6b-4f5e-b994-45b68c53e7cd"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""44ad9467-5a3b-4ab1-aa44-ee877ae26a2d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""89f09d42-b1d6-47d7-9e28-7bdf80926f01"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12e15fa3-9318-4215-bb11-d89949e5dbca"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EndGame"",
            ""id"": ""52597a64-4002-4cb5-aa5c-db07cfa3d81d"",
            ""actions"": [
                {
                    ""name"": ""PressToEnd"",
                    ""type"": ""Button"",
                    ""id"": ""ca9ad4fc-e6ad-4733-8492-d9cfaef9ed3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e87b40f-be4e-4576-9618-7f7240811652"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressToEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // StartGame
        m_StartGame = asset.FindActionMap("StartGame", throwIfNotFound: true);
        m_StartGame_PressToStart = m_StartGame.FindAction("PressToStart", throwIfNotFound: true);
        // AsteroidShip
        m_AsteroidShip = asset.FindActionMap("AsteroidShip", throwIfNotFound: true);
        m_AsteroidShip_Rotate = m_AsteroidShip.FindAction("Rotate", throwIfNotFound: true);
        m_AsteroidShip_Move = m_AsteroidShip.FindAction("Move", throwIfNotFound: true);
        m_AsteroidShip_Fire = m_AsteroidShip.FindAction("Fire", throwIfNotFound: true);
        // EndGame
        m_EndGame = asset.FindActionMap("EndGame", throwIfNotFound: true);
        m_EndGame_PressToEnd = m_EndGame.FindAction("PressToEnd", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // StartGame
    private readonly InputActionMap m_StartGame;
    private List<IStartGameActions> m_StartGameActionsCallbackInterfaces = new List<IStartGameActions>();
    private readonly InputAction m_StartGame_PressToStart;
    public struct StartGameActions
    {
        private @ShipInput m_Wrapper;
        public StartGameActions(@ShipInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PressToStart => m_Wrapper.m_StartGame_PressToStart;
        public InputActionMap Get() { return m_Wrapper.m_StartGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StartGameActions set) { return set.Get(); }
        public void AddCallbacks(IStartGameActions instance)
        {
            if (instance == null || m_Wrapper.m_StartGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StartGameActionsCallbackInterfaces.Add(instance);
            @PressToStart.started += instance.OnPressToStart;
            @PressToStart.performed += instance.OnPressToStart;
            @PressToStart.canceled += instance.OnPressToStart;
        }

        private void UnregisterCallbacks(IStartGameActions instance)
        {
            @PressToStart.started -= instance.OnPressToStart;
            @PressToStart.performed -= instance.OnPressToStart;
            @PressToStart.canceled -= instance.OnPressToStart;
        }

        public void RemoveCallbacks(IStartGameActions instance)
        {
            if (m_Wrapper.m_StartGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStartGameActions instance)
        {
            foreach (var item in m_Wrapper.m_StartGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StartGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StartGameActions @StartGame => new StartGameActions(this);

    // AsteroidShip
    private readonly InputActionMap m_AsteroidShip;
    private List<IAsteroidShipActions> m_AsteroidShipActionsCallbackInterfaces = new List<IAsteroidShipActions>();
    private readonly InputAction m_AsteroidShip_Rotate;
    private readonly InputAction m_AsteroidShip_Move;
    private readonly InputAction m_AsteroidShip_Fire;
    public struct AsteroidShipActions
    {
        private @ShipInput m_Wrapper;
        public AsteroidShipActions(@ShipInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_AsteroidShip_Rotate;
        public InputAction @Move => m_Wrapper.m_AsteroidShip_Move;
        public InputAction @Fire => m_Wrapper.m_AsteroidShip_Fire;
        public InputActionMap Get() { return m_Wrapper.m_AsteroidShip; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AsteroidShipActions set) { return set.Get(); }
        public void AddCallbacks(IAsteroidShipActions instance)
        {
            if (instance == null || m_Wrapper.m_AsteroidShipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AsteroidShipActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IAsteroidShipActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IAsteroidShipActions instance)
        {
            if (m_Wrapper.m_AsteroidShipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAsteroidShipActions instance)
        {
            foreach (var item in m_Wrapper.m_AsteroidShipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AsteroidShipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AsteroidShipActions @AsteroidShip => new AsteroidShipActions(this);

    // EndGame
    private readonly InputActionMap m_EndGame;
    private List<IEndGameActions> m_EndGameActionsCallbackInterfaces = new List<IEndGameActions>();
    private readonly InputAction m_EndGame_PressToEnd;
    public struct EndGameActions
    {
        private @ShipInput m_Wrapper;
        public EndGameActions(@ShipInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PressToEnd => m_Wrapper.m_EndGame_PressToEnd;
        public InputActionMap Get() { return m_Wrapper.m_EndGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EndGameActions set) { return set.Get(); }
        public void AddCallbacks(IEndGameActions instance)
        {
            if (instance == null || m_Wrapper.m_EndGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EndGameActionsCallbackInterfaces.Add(instance);
            @PressToEnd.started += instance.OnPressToEnd;
            @PressToEnd.performed += instance.OnPressToEnd;
            @PressToEnd.canceled += instance.OnPressToEnd;
        }

        private void UnregisterCallbacks(IEndGameActions instance)
        {
            @PressToEnd.started -= instance.OnPressToEnd;
            @PressToEnd.performed -= instance.OnPressToEnd;
            @PressToEnd.canceled -= instance.OnPressToEnd;
        }

        public void RemoveCallbacks(IEndGameActions instance)
        {
            if (m_Wrapper.m_EndGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEndGameActions instance)
        {
            foreach (var item in m_Wrapper.m_EndGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EndGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EndGameActions @EndGame => new EndGameActions(this);
    public interface IStartGameActions
    {
        void OnPressToStart(InputAction.CallbackContext context);
    }
    public interface IAsteroidShipActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
    public interface IEndGameActions
    {
        void OnPressToEnd(InputAction.CallbackContext context);
    }
}
